* {
	margin: 0;
	padding: 0;
	border: 0;
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
	list-style: none;
	text-decoration: none;
	vertical-align: baseline;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
	display: block;
}

button,
img {
	background-color: transparent;
}

a,
a:active,
a:focus,
a:hover,
button {
	outline: 0;
}

*:focus {
	outline: 0;
}

blockquote,
q {
	quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
	content: '';
	content: none;
}

table {
	border-collapse: collapse;
	border-spacing: 0;
}

a:focus,
a:hover,
a:active,
button {
	outline: 0;
}

abbr[title] {
	border-bottom: 1px dotted;
}

b,
strong {
	font-weight: bold;
}

img {
	border: 0;
	-ms-interpolation-mode: bicubic;
}

svg:not(:root) {
	overflow: hidden;
}

figure {
	margin: 0;
}

form {
	margin: 0;
}

fieldset {
	border: 0;
	margin: 0;
	padding: 0;
}

legend {
	border: 0;
	*margin-left: -7px;
	padding: 0;
	white-space: normal;
}

button[disabled],
input[disabled] {
	cursor: default;
}

input[type="checkbox"],
input[type="radio"] {
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
	padding: 0;
	*width: 13px;
	*height: 13px;
}

input[type="search"] {
	-webkit-appearance: textfield;
	-webkit-box-sizing: content-box;
	box-sizing: content-box;
}

input[type="search"]::-webkit-search-decoration,
input[type="search"]::-webkit-search-cancel-button {
	-webkit-appearance: none;
}

button::-moz-focus-inner,
input::-moz-focus-inner {
	border: 0;
	padding: 0;
}

textarea {
	overflow: auto;
	vertical-align: top;
	resize: none;
}

input:valid,
textarea:valid
input:invalid,
textarea:invalid {
	background-color: #f0dddd;
}

button,
input,
select,
textarea {
	font-size: 100%;
	margin: 0;
	vertical-align: baseline;
	*vertical-align: middle;
}

button,
input {
	line-height: normal;
}

button,
input[type="button"],
input[type="reset"],
input[type="submit"] {
	cursor: pointer;
	-webkit-appearance: button;
	*overflow: visible;
}

table {
	border-collapse: collapse;
	border-spacing: 0;
}

td {
	vertical-align: middle;
}

/**
 * Set up a decent box model on the root element
 */

html {
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
}

/**
 * Make all elements from the DOM inherit from the parent box-sizing
 * Since `*` has a specificity of 0, it does not override the `html` value
 * making all elements inheriting from the root box-sizing value
 * See: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
 */

*,
*::before,
*::after {
	-webkit-box-sizing: inherit;
	box-sizing: inherit;
}

/**
 * Basic styles for links
 */

a {
	color: #e50050;
	text-decoration: none;
}

a:hover,
a:active,
a:focus {
	color: #222222;
	text-decoration: underline;
}

/**
 * Basic typography style for copy text
 */

body {
	color: #222222;
	font-family: 'Roboto';
}

/**
 * Clear inner floats
 */

.clearfix::after {
	clear: both;
	content: '';
	display: table;
}

/**
 * Main content containers
 * 1. Make the container full-width with a maximum width
 * 2. Center it in the viewport
 * 3. Leave some space on the edges, especially valuable on small screens
 */

.container {
	max-width: 1180px; /* 1 */
	margin-left: auto; /* 2 */
	margin-right: auto; /* 2 */
	padding-left: 20px; /* 3 */
	padding-right: 20px; /* 3 */
	width: 100%; /* 1 */
}

/**
 * Hide text while making it readable for screen readers
 * 1. Needed in WebKit-based browsers because of an implementation bug;
 *    See: https://code.google.com/p/chromium/issues/detail?id=457146
 */

.hide-text {
	overflow: hidden;
	padding: 0; /* 1 */
	text-indent: 101%;
	white-space: nowrap;
}

/**
 * Hide element while making it readable for screen readers
 * Shamelessly borrowed from HTML5Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css#L119-L133
 */

.visually-hidden {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}

body {
	background: AntiqueWhite;
	color: DarkSalmon;
}

h1 {
	background-image: url(../images/sprite.png);
	background-position: 0px 0px;
	width: 512px;
	height: 512px;
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-pack: center;
	-ms-flex-pack: center;
	justify-content: center;
	-webkit-box-align: center;
	-ms-flex-align: center;
	align-items: center;
}

p {
	color: #e50050;
}

@media (min-width: 768px) and (max-width: 1023px) {

h1 {
	color: yellow;
}

p {
	color: blue;
}

}


/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
